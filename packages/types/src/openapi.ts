/**
 * This file is auto-generated by openapi-typescript.
 * Do not make direct changes to this file.
 * Run `pnpm gen:types` to regenerate.
 */

export interface paths {
  "/health": {
    get: {
      responses: {
        200: {
          content: {
            "application/json": {
              data: {
                status: "ok";
                uptime: number;
                services?: {
                  database?: "ok" | "error";
                  redis?: "ok" | "error";
                };
              };
              meta: components["schemas"]["Meta"];
            };
          };
        };
      };
    };
  };
  "/auth/register": {
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateUserRequest"];
        };
      };
      responses: {
        201: {
          content: {
            "application/json": {
              data: components["schemas"]["User"];
              meta: components["schemas"]["Meta"];
            };
          };
        };
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        409: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/login": {
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LoginRequest"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["LoginResponse"];
          };
        };
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query?: {
          page?: number;
          pageSize?: number;
          q?: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedResponse"] & {
              data: components["schemas"]["User"][];
            };
          };
        };
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": {
              data: components["schemas"]["User"];
              meta: components["schemas"]["Meta"];
            };
          };
        };
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    Error: {
      error: {
        code: string;
        message: string;
        details?: Array<{
          field?: string;
          message?: string;
        }>;
      };
      meta: components["schemas"]["Meta"];
    };
    Meta: {
      timestamp: string;
      requestId: string;
      version?: string;
    };
    User: {
      id: string;
      email: string;
      name: string;
      role?: "user" | "admin";
      emailVerified?: boolean;
      createdAt: string;
      updatedAt: string;
    };
    CreateUserRequest: {
      email: string;
      name: string;
      password: string;
    };
    LoginRequest: {
      email: string;
      password: string;
    };
    LoginResponse: {
      data: {
        token: string;
        user: components["schemas"]["User"];
      };
      meta: components["schemas"]["Meta"];
    };
    PaginatedResponse: {
      data: unknown[];
      meta: components["schemas"]["Meta"];
      pagination: {
        page: number;
        pageSize: number;
        total: number;
        totalPages: number;
      };
    };
  };
}